---
title: "Melbourne Racing Statistics"
format: html
editor: visual
---

```{r}
library(bettRtab)
library(tidyverse)
library(lubridate)
library(scales)
library(here)

m_r_race_lists <- readRDS(here("analysis", "racing-statistics", "m_r_race_lists.rds"))
runners_m_r <- parse_runners(m_r_race_lists)

# because the initial scrape included Cranbourne to test for errors
runners_m_r <- runners_m_r %>% 
  filter(meetingName != "CRANBOURNE")
```

Data was collected for the tracks listed below for all horse racing events in 2021 and 2022 (up to `r max(runners_m_r$meetingDate, na.rm=T)`).

-   Caulfield
-   Flemington
-   Moonee Valley
-   Sandown

There were `r runners_m_r %>% distinct(meetingName, meetingDate, raceNumber, raceName) %>% nrow()` individual races analysed over this time frame.

## What are we analysing?

Because we're going to be largely analysing the win markets, want to analyse some summary stats on the parimutuel (tote) and fixed odds winning market.

## What questions do we wat to answer?

1.  What price do winners pay?
2.  Do favourites always win?
  a.  and if there is two clear favourites and then roughies, how often do the favs win?
3.  Is there a difference between track? Weather? Race class? Number of runners, etc?
4.  Is there a way to optimise a quaddie structure - ie if taking field in one leg, and one or two in another, is there an optimal strategy to employ when to take the field or one-out?

Interestingly, both the tote (`r sum(runners_m_r$parimutuel.returnWin == 0)`) and fixed markets (`r sum(runners_m_r$fixedOdds.returnWin == 0, na.rm=T)`) have zeros, while there are almost 1,700 horses that had a missing fixed odds win price.

```{r}
summary(runners_m_r$parimutuel.returnWin)


summary(runners_m_r$fixedOdds.returnWin)
```

Looking at whether the horse ran gives us some info on these missing records.

When looking at the fixed odds status, the result is `NA`.. we can then use the tote status to get some more info and the bulk of these appeared to have run (`Normal`). We can infer from this that there were some races that didn't have a fixed odds market. From this little analysis, I will remove scratched runners from here on in, but importantly, will keep late scratchings in (might need this info for further analysis). Reasoning behind this is that scratching normally occur well in advance of the race, while late scratchings can happen throughout a race meet, even after exotics have started - quaddies, etc.

```{r}
runners_m_r %>% 
  filter(is.na(fixedOdds.returnWin)) %>% 
  count(fixedOdds.bettingStatus)

runners_m_r %>% 
  filter(is.na(fixedOdds.returnWin)) %>% 
  count(parimutuel.bettingStatus)

runners_m_r %>% 
  count(fixedOdds.bettingStatus, parimutuel.bettingStatus)
```

```{r}
runners_m_r <- runners_m_r %>% 
  filter(parimutuel.bettingStatus != "Scratched")
```

There are now `r sum(runners_m_r$parimutuel.returnWin == 0)` runners on the tote with a price of \$0, while there are `r sum(runners_m_r$fixedOdds.returnWin == 0, na.rm=T)` on fixed odds. We can substitue the missing tote values with the fixed odds win price, however there are `r runners_m_r %>% filter(parimutuel.returnWin == 0, is.na(fixedOdds.returnWin)) %>% nrow()` reords where a \$0 tote figure is missing in the fixed odds market all together. These are for late scratchings. Will remove these also, and for the rest, replace the tote with the fixed odds price. Will create a column called `treat_tote_care` to identify these.

```{r}
runners_m_r %>% 
  filter(parimutuel.returnWin == 0) %>% nrow()

runners_m_r %>% 
  filter(fixedOdds.returnWin == 0) %>% nrow()
```

```{r}
runners_m_r <- runners_m_r %>% 
  mutate(filter_out = case_when(
    parimutuel.returnWin == 0 & is.na(fixedOdds.returnWin) ~ "Y",
    TRUE ~ "N"
  )) %>% filter(filter_out == "N") %>% select(-filter_out) %>% 
  mutate(treat_tote_care = case_when(
    parimutuel.returnWin == 0 & fixedOdds.returnWin != 0 ~ "Y",
    TRUE ~ "N"
  )) %>% 
  mutate(parimutuel.returnWin = case_when(
    parimutuel.returnWin == 0 ~ fixedOdds.returnWin,
    TRUE ~ parimutuel.returnWin
  ))

```

Might also need to do this the other way for the fixed odds prices that are missing. Will call this `treat_fixed_odds_care`.

```{r}
runners_m_r <- runners_m_r %>% 
  mutate(treat_fixed_odds_care = case_when(
    is.na(fixedOdds.returnWin) ~ "Y",
    TRUE ~ "N"
  )) %>% 
  mutate(fixedOdds.returnWin = case_when(
    treat_fixed_odds_care == "Y" ~ parimutuel.returnWin,
    TRUE ~ fixedOdds.returnWin
  ))

runners_m_r %>% filter(parimutuel.returnWin == 0, is.na(fixedOdds.returnWin)) %>% nrow()
```


### Winners

Winners generally the lowest odds, not much difference between 2nd and 3rd, then increase in price

```{r}
runners_m_r %>% 
  ggplot(aes(x= parimutuel.returnWin, y= as.character(finishingPosition))) +
  geom_boxplot() +
  xlim(0, 100)

runners_m_r %>% 
  ggplot(aes(x= parimutuel.returnWin, y= as.character(finishingPosition))) +
  geom_jitter(alpha = 0.2) +
  xlim(0, 100)
```

```{r}
# runners_m_r %>% 
#   filter(finishingPosition == 1,
#          treat_fixed_odds_care == "N") %>% 
#   ggplot(aes(x=fixedOdds.returnWin)) +
#   geom_density()

runners_m_r %>% 
  filter(finishingPosition == 1,
         treat_fixed_odds_care == "N") %>% pull(fixedOdds.returnWin) %>% summary()


runners_m_r %>% 
  filter(finishingPosition == 1,
         treat_tote_care == "N") %>% pull(parimutuel.returnWin) %>% summary()


group_summary <- function(data, ..., x) {
  data %>%                               # Summary by group using dplyr
  group_by(...) %>% 
  summarize(n_races = n(),
            min = min({{x}}),
            q1 = quantile({{x}}, 0.25),
            median = median({{x}}),
            mean = mean({{x}}),
            q3 = quantile({{x}}, 0.75),
            max = max({{x}}))
}


group_summary(runners_m_r %>% filter(finishingPosition == 1), group=meetingName, x=parimutuel.returnWin)

group_summary(data=runners_m_r %>% filter(finishingPosition == 1) %>% mutate(is_group_race = str_detect(raceClassConditions, "GP")), group=meetingName, is_group_race, x=parimutuel.returnWin)

```


```{r statistical_modelling, include=FALSE, eval=FALSE}
myData <- runners_m_r %>% filter(finishingPosition == 1) %>% pull(parimutuel.returnWin)

library(dglm)
fit <- dglm(myData~1, family=Gamma(link="log"), mustart=mean(myData))
summary(fit)


mlgamma <- function(x) {
  fit <- dglm(
    x~1, 
    family=Gamma(link="log"), 
    mustart=mean(x)
  )
  mu <- exp(fit$coefficients)
  shape <- exp(-fit$dispersion.fit$coefficients)
  scale <- mu/shape
  result <- c(shape, scale)
  names(result) <- c("shape", "scale")
  result
}

set.seed(42)


shape <- mlgamma(myData)["shape"] %>% unname()
scale <- mlgamma(myData)["scale"] %>% unname()

simData <- rgamma(n=length(myData), shape, scale)

hist(myData)
hist(simData)


hist(myData)

# calculate implied probabilities using odds:
test_meet <- runners_m_r %>% 
  filter(meetingDate == "2021-01-01",
         raceNumber == 1) %>% 
  mutate(imp_prob = (1/parimutuel.returnWin)*100)


```



### Favourites

Now we want to do some analysis on favourites

```{r}

# select $2.8 as the heavy fav - it's the 5th percentile. Can change this if needed
heavy_fav_cutoff <- quantile(runners_m_r$parimutuel.returnWin, probs = seq(0, 1, 0.05))["5%"] %>% unname()

test <- runners_m_r %>% 
  arrange(meetingDate, meetingName, raceNumber, raceName, parimutuel.returnWin) %>% 
  group_by(meetingDate, meetingName, raceNumber, raceName) %>% 
  mutate(betting_rank = row_number()) %>% ungroup() %>% 
  mutate(heavy_fav = case_when(
    betting_rank == 1 & parimutuel.returnWin <= heavy_fav_cutoff ~ "Y",
    betting_rank == 1 & parimutuel.returnWin > heavy_fav_cutoff ~ "N",
    TRUE ~ "Non Fav"
  ))

```


How often did the favourite win?

Slight variation between tracks, but fav generally wins about 30-35% of the time. At the Valley, they win the least frequently.

```{r}
test %>% 
  filter(betting_rank == 1) %>% 
  mutate(finishingPosition = factor(finishingPosition, levels = c(1,2,3,4,0))) %>% 
  group_by(meetingName, finishingPosition) %>% 
  summarise(`Num Wins` = n()) %>% 
  mutate(`Num Races` = sum(`Num Wins`),
         `Win %`=`Num Wins` / sum(`Num Wins`)) %>% 
  filter(finishingPosition == 1) %>% 
  select(-finishingPosition) %>% 
  mutate(`Win %` = percent(`Win %`, accuracy = 0.1))
  

```



What about when there's a heavy fav?

There was a heavy fav (in this case any horse paying `r heavy_fav_cutoff %>% dollar()` or less), `r test %>% filter(heavy_fav == "Y") %>% nrow` of `r test %>% distinct(meetingName, meetingDate, raceName) %>% nrow()` races.

In these `r test %>% filter(heavy_fav == "Y") %>% nrow` races, the win rate of the fav jumped to between 36% and 45%.

```{r}
test %>% 
  filter(heavy_fav == "Y") %>% 
  mutate(finishingPosition = factor(finishingPosition, levels = c(1,2,3,4,0))) %>% 
  group_by(meetingName, finishingPosition) %>% 
  summarise(`Num Wins` = n()) %>% 
  mutate(`Num Races` = sum(`Num Wins`),
         `Win %`=`Num Wins` / sum(`Num Wins`)) %>% 
  filter(finishingPosition == 1) %>% 
  select(-finishingPosition) %>% 
  mutate(`Win %` = percent(`Win %`, accuracy = 0.1))
  

```



